{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { ErrMsgModuleComponent } from './err-msg-module/err-msg-module.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/dialog\";\nexport let MainServiceService = /*#__PURE__*/(() => {\n  class MainServiceService {\n    constructor(http, dialog) {\n      this.http = http;\n      this.dialog = dialog; // public url: string = 'http://192.168.1.8:3000';\n\n      this.url = 'http://localhost:3000';\n      this.purchasePrint = new Subject();\n      this.DataToPrint = new Subject();\n    }\n\n    addParty(body) {\n      return new Promise((response, reject) => {\n        this.http.post(`${this.url}/party/add_new`, body).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    nameAvailability(arg) {\n      this.http.get(`${this.url}/party/check_availability?name=${arg}`).subscribe(responseData => {});\n    }\n\n    autoCompleteName(keyword, type) {\n      // let result = await this.http.get(\n      //   `${this.url}/party/autocomplete_name?keyword=${keyword}&limit=5&${type}`\n      // );\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/party/autocomplete_name?keyword=${keyword}&limit=5&${type}`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    autoCompleteItemName(keyword) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/item/autocomplete_name?keyword=${keyword}&limit=5`).subscribe(responseData => {\n          console.log(responseData.message);\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    addPurchase(body) {\n      return new Promise((response, reject) => {\n        this.http.post(`${this.url}/purchase/add_new`, body).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    checkNameavail(val) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/party/check_availability?name=${val}`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    editPartyName(val) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/party/edit_party?partyId=${val}`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    addNewPurchase(body) {\n      return new Promise((response, reject) => {\n        this.http.post(`${this.url}/purchase/add_new`, body).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    } // Get Bill\n\n\n    getBillbyNum(val) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/purchase/by_bill_no?bill_no=${val}`) // .pipe(\n        //   map((resData: ResponseType) => {\n        //     console.log('resData.message', resData.message);\n        //       let date = new Date(resData.message.date);\n        //       resData.message.date = `${date.getDate()}/${\n        //         date.getMonth() + 1\n        //       }/${date.getFullYear()}`;\n        //     return resData;\n        //   })\n        // )\n        .subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    getBillbyDate(fd, fm, fy, td, tm, ty) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/purchase/by_date?fdd=${fd}&fmm=${fm}&fyyyy=${fy}&tdd=${td}&tmm=${tm}&tyyyy=${ty}&limit=${1}&page=${1}`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    getBillbyParty(id, page) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/purchase/by_party?party_id=${id}&limit=10&page=${page}`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    } // crate party connector\n\n\n    newCrateTransaction(body) {\n      return new Promise((response, reject) => {\n        this.http.post(`${this.url}/crate_transaction/add_new`, body).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    cratePartnameAvail(val) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/crate_party/check_availability?name=${val}`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    crateAutoCompleteName(keyword) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/crate_party/autocomplete_name?keyword=${keyword}&limit=5`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    addCrateParty(body) {\n      return new Promise((response, reject) => {\n        this.http.post(`${this.url}/crate_party/add_new`, body).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    getLedger(d, m, y) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/transaction/ledger?dd=${d}&mm=${m}&yyyy=${y}`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    getConstants() {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/constant`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    findParty(name) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/party/find?name=${name}`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    partyHistory(partyId, fd, fm, fy, td, tm, ty) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/transaction/party_transaction_history?partyId=${partyId}&fdd=${fd}&&fmm=${fm}&fyyyy=${fy}&tdd=${td}&tmm=${tm}&tyyyy=${ty}`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    addVasuli(id, amount, date) {\n      return new Promise((response, reject) => {\n        this.http.post(`${this.url}/transaction/add_vasuli?partyId=${id}&amount=${amount}&date=${date}`, 'body').subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    editParty(obj, id) {\n      console.log(obj, id);\n      return new Promise((response, reject) => {\n        this.http.post(`${this.url}/party/edit_party?partyId=${id}`, obj).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    editPurchase(obj, id) {\n      console.log(obj);\n      return new Promise((response, reject) => {\n        this.http.post(`${this.url}/purchase/edit?id=${id}`, obj).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    sellTransaction(obj) {\n      return new Promise((response, reject) => {\n        this.http.post(`${this.url}/transaction/add_new`, obj).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    autocompleteBillno(keyword) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/purchase/autocomplete_bill_no?${keyword}=k&limit=4`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    getCrateTransaction(Id, d, m, y) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/crate_transaction/transactions?partyId=${Id}&dd=${d}&mm=${m}&yyyy=${y}`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    addNewItem(itemName) {\n      return new Promise((response, reject) => {\n        this.http.post(`${this.url}/item/add_new`, {\n          itemName: itemName\n        }).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    sendSMS() {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/transaction/send_sms`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    getTodaysItem(item_name) {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/item/sell_of_item_today?item_name=${item_name}`).subscribe(responseData => {\n          let isError = this.checkForErr(responseData.status, responseData.message);\n\n          if (isError) {\n            reject('http request failed' + responseData.message);\n          } else {\n            response(responseData.message);\n          }\n        });\n      });\n    }\n\n    getTroublers() {\n      return new Promise((response, reject) => {\n        this.http.get(`${this.url}/party/troubler_list`).subscribe(responseData => {\n          console.log(responseData); // let isError = this.checkForErr(\n          //   responseData.status,\n          //   responseData.message\n          // );\n          // if (isError) {\n          //   reject('http request failed' + responseData.message);\n          // } else {\n\n          response(responseData); // }\n        });\n      });\n    }\n\n    checkForErr(statusCode, message) {\n      console.log(statusCode, message);\n\n      if (statusCode != 200) {\n        this.dialog.open(ErrMsgModuleComponent, {\n          data: message\n        });\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n  }\n\n  MainServiceService.ɵfac = function MainServiceService_Factory(t) {\n    return new (t || MainServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MatDialog));\n  };\n\n  MainServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MainServiceService,\n    factory: MainServiceService.ɵfac,\n    providedIn: 'root'\n  });\n  return MainServiceService;\n})();","map":null,"metadata":{},"sourceType":"module"}